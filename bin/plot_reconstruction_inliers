#!/usr/bin/env python

import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from os import listdir

import argparse
import matplotlib.pyplot as pl
import numpy as np

from opensfm import dataset
from opensfm import features


def plot_points_single(plot, im1, p1, point_format1='ob'):

    if p1.shape[0] == 0:
        return

    h1, w1, c = im1.shape
    p1d = features.denormalized_image_coordinates(p1, w1, h1)
    plot.plot(p1d[:, 0], p1d[:, 1], point_format1)


def create_subplot(figure, rows, columns, index, title, width, height, font_size=12):
    """ Creates a subplot with the supplied width. """
    subplot = figure.add_subplot(rows, columns, index)
    subplot.axis('off')
    pl.xlim(0, width)
    pl.ylim(height, 0)
    subplot.text(0.5, 1.04,
                 title,
                 horizontalalignment='center',
                 fontsize=font_size,
                 transform=subplot.transAxes)

    return subplot


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Test')
    parser.add_argument('dataset', help='path to the data set to be processed')

    args = parser.parse_args()
    data = dataset.DataSet(args.dataset)

    im2 = '03.jpg'
    im2_array = data.image_as_array(im2)

    files = sorted(listdir(data.data_path + '/tests/'))

    height_files = []
    coord_files = []
    tr_coord_files = []

    for file in files:
        if 'reconstruct_heights' in file:
            height_files.append(file)
        elif 'reconstruct_coords' in file:
            coord_files.append(file)
        elif 'reconstruct_tr_coords' in file:
            tr_coord_files.append(file)

    if len(height_files) != len(coord_files) or len(height_files) != len(tr_coord_files):
        raise AssertionError

    counts = {}

    index = 0
    for i in range(0, len(height_files)):

        height_file = height_files[i]
        coord_file = coord_files[i]
        tr_coord_file = tr_coord_files[i]


        height_suffix = height_file[len('reconstruct_heights'):]
        coord_suffix = coord_file[len('reconstruct_coords'):]
        tr_coord_suffix = tr_coord_file[len('reconstruct_tr_coords'):]

        if height_suffix != coord_suffix or height_suffix != tr_coord_suffix:
            raise AssertionError

        heights = np.loadtxt(data.data_path + '/tests/' + height_files[i], float)
        rec_coords = np.loadtxt(data.data_path + '/tests/' + coord_files[i], float)
        rec_tr_coords = np.loadtxt(data.data_path + '/tests/' + tr_coord_files[i], float)

        for i in range(0, len(heights)):

            counts[index] = {}

            counts[index]['count'] = heights[i]
            counts[index]['coord'] = rec_coords[i]
            counts[index]['tr_coord'] = rec_tr_coords[i]

            index += 1


    blacks = []
    blues = []
    magentas = []
    reds = []
    yellows = []
    whites = []

    for count in counts:
        c = counts[count]['count']
        coord = counts[count]['coord']

        fraction = c

        if fraction < 0.01:
            blacks.append(coord)
        elif fraction < 0.1:
            blues.append(coord)
        elif fraction < 0.2:
            magentas.append(coord)
        elif fraction < 0.3:
            reds.append(coord)
        elif fraction < 0.4:
            yellows.append(coord)
        else:
            whites.append(coord)

    blacks = np.array(blacks)
    blues = np.array(blues)
    magentas = np.array(magentas)
    reds = np.array(reds)
    yellows = np.array(yellows)
    whites = np.array(whites)

    fig = pl.figure(figsize=(12, 12))
    h2, w2, c = im2_array.shape
    subplot = create_subplot(fig, 1, 1, 1, '', w2, h2)
    fig.subplots_adjust(left=0.01, bottom=0.01, right=0.99, top=0.99, wspace=0., hspace=0.)
    subplot.imshow(im2_array)

    plot_points_single(subplot, im2_array, blacks, 'ok')
    plot_points_single(subplot, im2_array, blues, 'ob')
    plot_points_single(subplot, im2_array, magentas, 'om')
    plot_points_single(subplot, im2_array, reds, 'or')
    plot_points_single(subplot, im2_array, yellows, 'oy')
    plot_points_single(subplot, im2_array, whites, 'ow')

    pl.show()

    sorted_counts = sorted(counts.keys(), key=lambda k: counts[k]['coord'][0])

    centers = np.array([index + 1 for index, count in enumerate(sorted_counts)])
    heights = np.array([counts[count]['count'] for count in sorted_counts])

    plot_colors = []

    for count in sorted_counts:
        fraction = counts[count]['count']

        if fraction < 0.01:
            plot_colors.append('k')
        elif fraction < 0.1:
            plot_colors.append('b')
        elif fraction < 0.2:
            plot_colors.append('m')
        elif fraction < 0.3:
            plot_colors.append('r')
        elif fraction < 0.4:
            plot_colors.append('y')
        else:
            plot_colors.append('w')

    fig, ax = pl.subplots()

    pl.ylim(0., 1.)
    pl.xlim(0., 100.)
    ax.bar(centers, heights, align='center', color=plot_colors)

    pl.show()